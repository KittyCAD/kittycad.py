"""The KittyCAD Python SDK - Generated Client Classes"""

import os
from typing import Any, Optional

from .client import Client
from .exceptions import (
    KittyCADError,
    KittyCADAPIError,
    KittyCADClientError,
    KittyCADServerError,
    KittyCADConnectionError,
    KittyCADTimeoutError,
)

# Import all model types used in return type annotations
{% set all_return_types = [] %}
{% for tag, functions in endpoints_by_tag.items() %}
    {% for func_name, func_info in functions.items() %}
        {% if func_info.return_type != "Any" and func_info.return_type not in all_return_types %}
            {% set _ = all_return_types.append(func_info.return_type) %}
        {% endif %}
    {% endfor %}
{% endfor %}

{% for return_type in all_return_types %}
from .models.{{ return_type|pascal_to_snake }} import {{ return_type }}
{% endfor %}





{% for tag, functions in endpoints_by_tag.items() %}
{% set tag_pascal = tag|to_pascal_case %}
class {{ tag_pascal }}API:
    """API for {{ tag }} endpoints"""
    
    def __init__(self, client: Client) -> None:
        self.client = client
    
    {% for func_name, func_info in functions.items() %}
    {% if func_info.is_websocket %}
    def {{ func_name }}(self, *args, **kwargs):
        """WebSocket connection for {{ func_name }}
        
        {{ func_info.description }}
        """
        {% if func_info.has_websocket_class %}
        # Import WebSocket wrapper class
        from .api.{{ tag }}.{{ func_name }} import WebSocket
        
        # Pass client directly to WebSocket constructor
        kwargs["client"] = self.client
        return WebSocket(*args, **kwargs)
        {% else %}
        # Use sync function for WebSocket endpoints without wrapper class
        from .api.{{ tag }}.{{ func_name }} import sync
        kwargs["client"] = self.client
        return sync(*args, **kwargs)
        {% endif %}
    {% else %}
    def {{ func_name }}(self, *args, **kwargs) -> {{ func_info.return_type }}:
        """{{ func_info.description }}"""
        from .api.{{ tag }}.{{ func_name }} import sync
        kwargs["client"] = self.client
        return sync(*args, **kwargs)
    {% endif %}
    
    {% endfor %}


class Async{{ tag_pascal }}API:
    """Async API for {{ tag }} endpoints"""
    
    def __init__(self, client: Client) -> None:
        self.client = client
    
    {% for func_name, func_info in functions.items() %}
    {% if func_info.is_websocket %}
    def {{ func_name }}(self, *args, **kwargs):
        """WebSocket connection for {{ func_name }} (sync wrapper for async client)
        
        {{ func_info.description }}
        
        Note: WebSocket connections are synchronous even in AsyncKittyCAD
        """
        {% if func_info.has_websocket_class %}
        # Import WebSocket wrapper class
        from .api.{{ tag }}.{{ func_name }} import WebSocket
        
        # Pass client directly to WebSocket constructor
        kwargs["client"] = self.client
        return WebSocket(*args, **kwargs)
        {% else %}
        # Use sync function for WebSocket endpoints without wrapper class
        from .api.{{ tag }}.{{ func_name }} import sync
        kwargs["client"] = self.client
        return sync(*args, **kwargs)
        {% endif %}
    {% else %}
    async def {{ func_name }}(self, *args, **kwargs) -> {{ func_info.return_type }}:
        """{{ func_info.description }}"""
        from .api.{{ tag }}.{{ func_name }} import asyncio
        kwargs["client"] = self.client
        return await asyncio(*args, **kwargs)
    {% endif %}
    
    {% endfor %}

{% endfor %}

class KittyCAD(Client):
    """Main KittyCAD client class with sync API interface.

    Usage:
        client = KittyCAD(token="your-api-token")
        user = client.users.get_user_self()

    Or with environment variable:
        client = KittyCAD()  # Uses KITTYCAD_API_TOKEN or ZOO_API_TOKEN
    """

    def __init__(self, token: Optional[str] = None, **kwargs) -> None:
        if token is None:
            token = os.getenv("KITTYCAD_API_TOKEN") or os.getenv("ZOO_API_TOKEN")
            if token is None:
                raise ValueError(
                    "No API token provided. Either pass token parameter or set "
                    "KITTYCAD_API_TOKEN or ZOO_API_TOKEN environment variable."
                )
        super().__init__(token=token, **kwargs)
        # Add API modules directly to client
        {% for tag in endpoints_by_tag.keys() %}
        {% set tag_pascal = tag|to_pascal_case %}
        self.{{ tag }}: {{ tag_pascal }}API = {{ tag_pascal }}API(self)
        {% endfor %}


class AsyncKittyCAD(Client):
    """Async KittyCAD client class with async API interface.

    Usage:
        import asyncio
        from kittycad import AsyncKittyCAD

        async def main():
            client = AsyncKittyCAD(token="your-api-token")
            user = await client.users.get_user_self()
            
        asyncio.run(main())

    Or with environment variable:
        client = AsyncKittyCAD()  # Uses KITTYCAD_API_TOKEN or ZOO_API_TOKEN
    """

    def __init__(self, token: Optional[str] = None, **kwargs) -> None:
        if token is None:
            token = os.getenv("KITTYCAD_API_TOKEN") or os.getenv("ZOO_API_TOKEN")
            if token is None:
                raise ValueError(
                    "No API token provided. Either pass token parameter or set "
                    "KITTYCAD_API_TOKEN or ZOO_API_TOKEN environment variable."
                )
        super().__init__(token=token, **kwargs)
        # Add async API modules directly to client
        {% for tag in endpoints_by_tag.keys() %}
        {% set tag_pascal = tag|to_pascal_case %}
        self.{{ tag }}: Async{{ tag_pascal }}API = Async{{ tag_pascal }}API(self)
        {% endfor %}


__all__ = [
    "KittyCAD",
    "AsyncKittyCAD",
    "KittyCADError",
    "KittyCADAPIError", 
    "KittyCADClientError",
    "KittyCADServerError",
    "KittyCADConnectionError",
    "KittyCADTimeoutError",
]