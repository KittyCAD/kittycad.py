[{"op": "add", "path": "/paths/~1user~1session~1{token}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_session_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Session\nfrom kittycad.types import Response\n\n\ndef example_get_session_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Session, Error]] = get_session_for_user.sync(\n        client=client,\n        token=\"<uuid>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Session = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_session_for_user.html"}}, {"op": "add", "path": "/paths/~1users-extended/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import list_users_extended\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, ExtendedUserResultsPage\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_users_extended():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[ExtendedUserResultsPage, Error]\n    ] = list_users_extended.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ExtendedUserResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.list_users_extended.html"}}, {"op": "add", "path": "/paths/~1ai~1text-to-3d~1{output_format}/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.ai import create_text_to_3d\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Mesh\nfrom kittycad.models.file_export_format import FileExportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_text_to_3d():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Mesh, Error]] = create_text_to_3d.sync(\n        client=client,\n        output_format=FileExportFormat.DAE,\n        prompt=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Mesh = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.ai.create_text_to_3d.html"}}, {"op": "add", "path": "/paths/~1users~1{id}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, User\nfrom kittycad.types import Response\n\n\ndef example_get_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[User, Error]] = get_user.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: User = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1invoices/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import list_invoices_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Invoice\nfrom kittycad.types import Response\n\n\ndef example_list_invoices_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[List[Invoice], Error]] = list_invoices_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: List[Invoice] = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.list_invoices_for_user.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1frequency~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_frequency_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitFrequencyConversion\nfrom kittycad.models.unit_frequency import UnitFrequency\nfrom kittycad.types import Response\n\n\ndef example_get_frequency_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitFrequencyConversion, Error]\n    ] = get_frequency_unit_conversion.sync(\n        client=client,\n        input_unit=UnitFrequency.GIGAHERTZ,\n        output_unit=UnitFrequency.GIGAHERTZ,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitFrequencyConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_frequency_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1_meta~1info/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.meta import get_metadata\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Metadata\nfrom kittycad.types import Response\n\n\ndef example_get_metadata():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Metadata, Error]] = get_metadata.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Metadata = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.meta.get_metadata.html"}}, {"op": "add", "path": "/paths/~1ws~1executor~1term/get/x-python", "value": {"example": "from kittycad.api.executor import create_executor_term\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.types import Response\n\n\ndef example_create_executor_term():\n    # Create our client.\n    client = ClientFromEnv()\n\n    create_executor_term.sync(\n        client=client,\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.executor.create_executor_term.html"}}, {"op": "add", "path": "/paths/~1modeling~1cmd/post/x-python", "value": {"example": "from kittycad.api.modeling import cmd\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models.modeling_cmd import ModelingCmd\nfrom kittycad.models.modeling_cmd_id import ModelingCmdId\nfrom kittycad.models.modeling_cmd_req import ModelingCmdReq\nfrom kittycad.types import Response\n\n\ndef example_cmd():\n    # Create our client.\n    client = ClientFromEnv()\n\n    cmd.sync(\n        client=client,\n        body=ModelingCmdReq(\n            cmd=ModelingCmd.START_PATH,\n            cmd_id=ModelingCmdId(\"<uuid>\"),\n            file_id=\"<string>\",\n        ),\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.modeling.cmd.html"}}, {"op": "add", "path": "/paths/~1ai~1image-to-3d~1{input_format}~1{output_format}/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.ai import create_image_to_3d\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Mesh\nfrom kittycad.models.file_export_format import FileExportFormat\nfrom kittycad.models.image_type import ImageType\nfrom kittycad.types import Response\n\n\ndef example_create_image_to_3d():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Mesh, Error]] = create_image_to_3d.sync(\n        client=client,\n        input_format=ImageType.PNG,\n        output_format=FileExportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Mesh = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.ai.create_image_to_3d.html"}}, {"op": "add", "path": "/paths/~1auth~1email/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.hidden import auth_email\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, VerificationToken\nfrom kittycad.models.email_authentication_form import EmailAuthenticationForm\nfrom kittycad.types import Response\n\n\ndef example_auth_email():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[VerificationToken, Error]] = auth_email.sync(\n        client=client,\n        body=EmailAuthenticationForm(\n            email=\"<string>\",\n        ),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: VerificationToken = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.hidden.auth_email.html"}}, {"op": "add", "path": "/paths/~1file~1density/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import create_file_density\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileDensity\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_density():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[FileDensity, Error]] = create_file_density.sync(\n        client=client,\n        material_mass=3.14,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileDensity = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_density.html"}}, {"op": "add", "path": "/paths/~1constant~1physics~1{constant}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.constant import get_physics_constant\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, PhysicsConstant\nfrom kittycad.models.physics_constant_name import PhysicsConstantName\nfrom kittycad.types import Response\n\n\ndef example_get_physics_constant():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[PhysicsConstant, Error]] = get_physics_constant.sync(\n        client=client,\n        constant=PhysicsConstantName.PI,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: PhysicsConstant = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.constant.get_physics_constant.html"}}, {"op": "add", "path": "/paths/~1user~1api-calls/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import user_list_api_calls\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallWithPriceResultsPage, Error\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_user_list_api_calls():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[ApiCallWithPriceResultsPage, Error]\n    ] = user_list_api_calls.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiCallWithPriceResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.user_list_api_calls.html"}}, {"op": "add", "path": "/paths/~1modeling~1cmd_batch/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.modeling import cmd_batch\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, ModelingOutcomes\nfrom kittycad.models.modeling_cmd import ModelingCmd\nfrom kittycad.models.modeling_cmd_id import ModelingCmdId\nfrom kittycad.models.modeling_cmd_req import ModelingCmdReq\nfrom kittycad.models.modeling_cmd_req_batch import ModelingCmdReqBatch\nfrom kittycad.types import Response\n\n\ndef example_cmd_batch():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ModelingOutcomes, Error]] = cmd_batch.sync(\n        client=client,\n        body=ModelingCmdReqBatch(\n            cmds={\n                \"<string>\": ModelingCmdReq(\n                    cmd=ModelingCmd.START_PATH,\n                    cmd_id=ModelingCmdId(\"<uuid>\"),\n                    file_id=\"<string>\",\n                )\n            },\n            file_id=\"<string>\",\n        ),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ModelingOutcomes = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.modeling.cmd_batch.html"}}, {"op": "add", "path": "/paths/~1users-extended~1{id}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_user_extended\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, ExtendedUser\nfrom kittycad.types import Response\n\n\ndef example_get_user_extended():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ExtendedUser, Error]] = get_user_extended.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ExtendedUser = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user_extended.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1methods~1{id}/delete/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import delete_payment_method_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_delete_payment_method_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = delete_payment_method_for_user.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.delete_payment_method_for_user.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1volume~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_volume_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitVolumeConversion\nfrom kittycad.models.unit_volume import UnitVolume\nfrom kittycad.types import Response\n\n\ndef example_get_volume_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitVolumeConversion, Error]\n    ] = get_volume_unit_conversion.sync(\n        client=client,\n        input_unit=UnitVolume.CUBIC_CENTIMETRES,\n        output_unit=UnitVolume.CUBIC_CENTIMETRES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitVolumeConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_volume_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1user/delete/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import delete_user_self\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_delete_user_self():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = delete_user_self.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.delete_user_self.html"}}, {"op": "add", "path": "/paths/~1user/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_user_self\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, User\nfrom kittycad.types import Response\n\n\ndef example_get_user_self():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[User, Error]] = get_user_self.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: User = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user_self.html"}}, {"op": "add", "path": "/paths/~1user/put/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import update_user_self\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, User\nfrom kittycad.models.update_user import UpdateUser\nfrom kittycad.types import Response\n\n\ndef example_update_user_self():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[User, Error]] = update_user_self.sync(\n        client=client,\n        body=UpdateUser(\n            company=\"<string>\",\n            discord=\"<string>\",\n            first_name=\"<string>\",\n            github=\"<string>\",\n            last_name=\"<string>\",\n            phone=\"<string>\",\n        ),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: User = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.update_user_self.html"}}, {"op": "add", "path": "/paths/~1user~1extended/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_user_self_extended\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, ExtendedUser\nfrom kittycad.types import Response\n\n\ndef example_get_user_self_extended():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ExtendedUser, Error]] = get_user_self_extended.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ExtendedUser = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user_self_extended.html"}}, {"op": "add", "path": "/paths/~1users/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import list_users\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UserResultsPage\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_users():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[UserResultsPage, Error]] = list_users.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UserResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.list_users.html"}}, {"op": "add", "path": "/paths/~1logout/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.hidden import logout\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_logout():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = logout.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.hidden.logout.html"}}, {"op": "add", "path": "/paths/~1auth~1email~1callback/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.hidden import auth_email_callback\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_auth_email_callback():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = auth_email_callback.sync(\n        client=client,\n        email=\"<string>\",\n        token=\"<string>\",\n        callback_url=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.hidden.auth_email_callback.html"}}, {"op": "add", "path": "/paths/~1/get/x-python", "value": {"example": "from kittycad.api.meta import get_schema\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.types import Response\n\n\ndef example_get_schema():\n    # Create our client.\n    client = ClientFromEnv()\n\n    get_schema.sync(\n        client=client,\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.meta.get_schema.html"}}, {"op": "add", "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import (\n    create_file_conversion,\n    create_file_conversion_with_base64_helper,\n)\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileConversion\nfrom kittycad.models.file_export_format import FileExportFormat\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_conversion_with_base64_helper():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[FileConversion, Error]\n    ] = create_file_conversion_with_base64_helper.sync(\n        client=client,\n        output_format=FileExportFormat.DAE,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_conversion_with_base64_helper.html"}}, {"op": "add", "path": "/paths/~1openai~1openapi.json/get/x-python", "value": {"example": "from kittycad.api.meta import get_openai_schema\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.types import Response\n\n\ndef example_get_openai_schema():\n    # Create our client.\n    client = ClientFromEnv()\n\n    get_openai_schema.sync(\n        client=client,\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.meta.get_openai_schema.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1balance/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import get_payment_balance_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import CustomerBalance, Error\nfrom kittycad.types import Response\n\n\ndef example_get_payment_balance_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[CustomerBalance, Error]\n    ] = get_payment_balance_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: CustomerBalance = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.get_payment_balance_for_user.html"}}, {"op": "add", "path": "/paths/~1ws~1modeling~1commands/get/x-python", "value": {"example": "from kittycad.api.modeling import modeling_commands_ws\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.types import Response\n\n\ndef example_modeling_commands_ws():\n    # Create our client.\n    client = ClientFromEnv()\n\n    modeling_commands_ws.sync(\n        client=client,\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.modeling.modeling_commands_ws.html"}}, {"op": "add", "path": "/paths/~1.well-known~1ai-plugin.json/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.meta import get_ai_plugin_manifest\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import AiPluginManifest, Error\nfrom kittycad.types import Response\n\n\ndef example_get_ai_plugin_manifest():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[AiPluginManifest, Error]\n    ] = get_ai_plugin_manifest.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: AiPluginManifest = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.meta.get_ai_plugin_manifest.html"}}, {"op": "add", "path": "/paths/~1file~1center-of-mass/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import create_file_center_of_mass\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileCenterOfMass\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_center_of_mass():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[FileCenterOfMass, Error]\n    ] = create_file_center_of_mass.sync(\n        client=client,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileCenterOfMass = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_center_of_mass.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1methods/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import list_payment_methods_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, PaymentMethod\nfrom kittycad.types import Response\n\n\ndef example_list_payment_methods_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[List[PaymentMethod], Error]\n    ] = list_payment_methods_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: List[PaymentMethod] = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.list_payment_methods_for_user.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1area~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_area_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitAreaConversion\nfrom kittycad.models.unit_area import UnitArea\nfrom kittycad.types import Response\n\n\ndef example_get_area_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitAreaConversion, Error]\n    ] = get_area_unit_conversion.sync(\n        client=client,\n        input_unit=UnitArea.ACRES,\n        output_unit=UnitArea.ACRES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitAreaConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_area_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1force~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_force_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitForceConversion\nfrom kittycad.models.unit_force import UnitForce\nfrom kittycad.types import Response\n\n\ndef example_get_force_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitForceConversion, Error]\n    ] = get_force_unit_conversion.sync(\n        client=client,\n        input_unit=UnitForce.DYNES,\n        output_unit=UnitForce.DYNES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitForceConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_force_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1apps~1github~1webhook/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.apps import apps_github_webhook\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_apps_github_webhook():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = apps_github_webhook.sync(\n        client=client,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.apps.apps_github_webhook.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1length~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_length_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitLengthConversion\nfrom kittycad.models.unit_length import UnitLength\nfrom kittycad.types import Response\n\n\ndef example_get_length_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitLengthConversion, Error]\n    ] = get_length_unit_conversion.sync(\n        client=client,\n        input_unit=UnitLength.CENTIMETRES,\n        output_unit=UnitLength.CENTIMETRES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitLengthConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_length_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1pressure~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_pressure_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitPressureConversion\nfrom kittycad.models.unit_pressure import UnitPressure\nfrom kittycad.types import Response\n\n\ndef example_get_pressure_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitPressureConversion, Error]\n    ] = get_pressure_unit_conversion.sync(\n        client=client,\n        input_unit=UnitPressure.ATMOSPHERES,\n        output_unit=UnitPressure.ATMOSPHERES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitPressureConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_pressure_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1temperature~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_temperature_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitTemperatureConversion\nfrom kittycad.models.unit_temperature import UnitTemperature\nfrom kittycad.types import Response\n\n\ndef example_get_temperature_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitTemperatureConversion, Error]\n    ] = get_temperature_unit_conversion.sync(\n        client=client,\n        input_unit=UnitTemperature.CELSIUS,\n        output_unit=UnitTemperature.CELSIUS,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitTemperatureConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_temperature_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1mass~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_mass_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitMassConversion\nfrom kittycad.models.unit_mass import UnitMass\nfrom kittycad.types import Response\n\n\ndef example_get_mass_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitMassConversion, Error]\n    ] = get_mass_unit_conversion.sync(\n        client=client,\n        input_unit=UnitMass.CARATS,\n        output_unit=UnitMass.CARATS,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitMassConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_mass_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1async~1operations/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import list_async_operations\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import AsyncApiCallResultsPage, Error\nfrom kittycad.models.api_call_status import ApiCallStatus\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_async_operations():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[AsyncApiCallResultsPage, Error]\n    ] = list_async_operations.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        status=ApiCallStatus.QUEUED,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: AsyncApiCallResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.list_async_operations.html"}}, {"op": "add", "path": "/paths/~1api-calls/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import list_api_calls\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallWithPriceResultsPage, Error\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_api_calls():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[ApiCallWithPriceResultsPage, Error]\n    ] = list_api_calls.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiCallWithPriceResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.list_api_calls.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1tax/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import validate_customer_tax_information_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_validate_customer_tax_information_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = validate_customer_tax_information_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.validate_customer_tax_information_for_user.html"}}, {"op": "add", "path": "/paths/~1file~1volume/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import create_file_volume\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileVolume\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_volume():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[FileVolume, Error]] = create_file_volume.sync(\n        client=client,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileVolume = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_volume.html"}}, {"op": "add", "path": "/paths/~1user~1api-tokens/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_tokens import create_api_token_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiToken, Error\nfrom kittycad.types import Response\n\n\ndef example_create_api_token_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ApiToken, Error]] = create_api_token_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiToken = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_tokens.create_api_token_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1api-tokens/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_tokens import list_api_tokens_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiTokenResultsPage, Error\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_api_tokens_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[ApiTokenResultsPage, Error]\n    ] = list_api_tokens_for_user.sync(\n        client=client,\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiTokenResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_tokens.list_api_tokens_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1front-hash/get/x-python", "value": {"example": "from kittycad.api.users import get_user_front_hash_self\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.types import Response\n\n\ndef example_get_user_front_hash_self():\n    # Create our client.\n    client = ClientFromEnv()\n\n    get_user_front_hash_self.sync(\n        client=client,\n    )\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user_front_hash_self.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1energy~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_energy_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitEnergyConversion\nfrom kittycad.models.unit_energy import UnitEnergy\nfrom kittycad.types import Response\n\n\ndef example_get_energy_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitEnergyConversion, Error]\n    ] = get_energy_unit_conversion.sync(\n        client=client,\n        input_unit=UnitEnergy.BTU,\n        output_unit=UnitEnergy.BTU,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitEnergyConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_energy_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1current~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_current_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitCurrentConversion\nfrom kittycad.models.unit_current import UnitCurrent\nfrom kittycad.types import Response\n\n\ndef example_get_current_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitCurrentConversion, Error]\n    ] = get_current_unit_conversion.sync(\n        client=client,\n        input_unit=UnitCurrent.AMPERES,\n        output_unit=UnitCurrent.AMPERES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitCurrentConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_current_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1apps~1github~1consent/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.apps import apps_github_consent\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import AppClientInfo, Error\nfrom kittycad.types import Response\n\n\ndef example_apps_github_consent():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[AppClientInfo, Error]] = apps_github_consent.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: AppClientInfo = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.apps.apps_github_consent.html"}}, {"op": "add", "path": "/paths/~1file~1execute~1{lang}/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.executor import create_file_execution\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import CodeOutput, Error\nfrom kittycad.models.code_language import CodeLanguage\nfrom kittycad.types import Response\n\n\ndef example_create_file_execution():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[CodeOutput, Error]] = create_file_execution.sync(\n        client=client,\n        lang=CodeLanguage.GO,\n        output=None,  # Optional[str]\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: CodeOutput = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.executor.create_file_execution.html"}}, {"op": "add", "path": "/paths/~1user~1api-tokens~1{token}/delete/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_tokens import delete_api_token_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_delete_api_token_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = delete_api_token_for_user.sync(\n        client=client,\n        token=\"<uuid>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_tokens.delete_api_token_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1api-tokens~1{token}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_tokens import get_api_token_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiToken, Error\nfrom kittycad.types import Response\n\n\ndef example_get_api_token_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ApiToken, Error]] = get_api_token_for_user.sync(\n        client=client,\n        token=\"<uuid>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiToken = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_tokens.get_api_token_for_user.html"}}, {"op": "add", "path": "/paths/~1api-calls~1{id}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import get_api_call\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallWithPrice, Error\nfrom kittycad.types import Response\n\n\ndef example_get_api_call():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ApiCallWithPrice, Error]] = get_api_call.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiCallWithPrice = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.get_api_call.html"}}, {"op": "add", "path": "/paths/~1user~1onboarding/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.users import get_user_onboarding_self\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Onboarding\nfrom kittycad.types import Response\n\n\ndef example_get_user_onboarding_self():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Onboarding, Error]] = get_user_onboarding_self.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Onboarding = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.users.get_user_onboarding_self.html"}}, {"op": "add", "path": "/paths/~1file~1mass/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import create_file_mass\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileMass\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_mass():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[FileMass, Error]] = create_file_mass.sync(\n        client=client,\n        material_density=3.14,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileMass = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_mass.html"}}, {"op": "add", "path": "/paths/~1apps~1github~1callback/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.apps import apps_github_callback\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_apps_github_callback():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = apps_github_callback.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.apps.apps_github_callback.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1angle~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_angle_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitAngleConversion\nfrom kittycad.models.unit_angle import UnitAngle\nfrom kittycad.types import Response\n\n\ndef example_get_angle_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitAngleConversion, Error]\n    ] = get_angle_unit_conversion.sync(\n        client=client,\n        input_unit=UnitAngle.DEGREES,\n        output_unit=UnitAngle.DEGREES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitAngleConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_angle_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1ping/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.meta import ping\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, Pong\nfrom kittycad.types import Response\n\n\ndef example_ping():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[Pong, Error]] = ping.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Pong = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.meta.ping.html"}}, {"op": "add", "path": "/paths/~1users~1{id}~1api-calls/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import list_api_calls_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallWithPriceResultsPage, Error\nfrom kittycad.models.created_at_sort_mode import CreatedAtSortMode\nfrom kittycad.types import Response\n\n\ndef example_list_api_calls_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[ApiCallWithPriceResultsPage, Error]\n    ] = list_api_calls_for_user.sync(\n        client=client,\n        id=\"<string>\",\n        sort_by=CreatedAtSortMode.CREATED_AT_ASCENDING,\n        limit=None,  # Optional[int]\n        page_token=None,  # Optional[str]\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiCallWithPriceResultsPage = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.list_api_calls_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1api-calls~1{id}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import get_api_call_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallWithPrice, Error\nfrom kittycad.types import Response\n\n\ndef example_get_api_call_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Union[ApiCallWithPrice, Error]] = get_api_call_for_user.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: ApiCallWithPrice = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.get_api_call_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1payment/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import get_payment_information_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Customer, Error\nfrom kittycad.types import Response\n\n\ndef example_get_payment_information_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[Customer, Error]\n    ] = get_payment_information_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Customer = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.get_payment_information_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1payment/put/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import update_payment_information_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Customer, Error\nfrom kittycad.models.billing_info import BillingInfo\nfrom kittycad.types import Response\n\n\ndef example_update_payment_information_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[Customer, Error]\n    ] = update_payment_information_for_user.sync(\n        client=client,\n        body=BillingInfo(\n            name=\"<string>\",\n            phone=\"<string>\",\n        ),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Customer = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.update_payment_information_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1payment/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import create_payment_information_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Customer, Error\nfrom kittycad.models.billing_info import BillingInfo\nfrom kittycad.types import Response\n\n\ndef example_create_payment_information_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[Customer, Error]\n    ] = create_payment_information_for_user.sync(\n        client=client,\n        body=BillingInfo(\n            name=\"<string>\",\n            phone=\"<string>\",\n        ),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Customer = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.create_payment_information_for_user.html"}}, {"op": "add", "path": "/paths/~1user~1payment/delete/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import delete_payment_information_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error\nfrom kittycad.types import Response\n\n\ndef example_delete_payment_information_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[Error] = delete_payment_information_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Error = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.delete_payment_information_for_user.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1torque~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_torque_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitTorqueConversion\nfrom kittycad.models.unit_torque import UnitTorque\nfrom kittycad.types import Response\n\n\ndef example_get_torque_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitTorqueConversion, Error]\n    ] = get_torque_unit_conversion.sync(\n        client=client,\n        input_unit=UnitTorque.NEWTON_METRES,\n        output_unit=UnitTorque.NEWTON_METRES,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitTorqueConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_torque_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1api-call-metrics/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import get_api_call_metrics\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import ApiCallQueryGroup, Error\nfrom kittycad.models.api_call_query_group_by import ApiCallQueryGroupBy\nfrom kittycad.types import Response\n\n\ndef example_get_api_call_metrics():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[List[ApiCallQueryGroup], Error]\n    ] = get_api_call_metrics.sync(\n        client=client,\n        group_by=ApiCallQueryGroupBy.EMAIL,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: List[ApiCallQueryGroup] = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.get_api_call_metrics.html"}}, {"op": "add", "path": "/paths/~1user~1payment~1intent/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.payments import create_payment_intent_for_user\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, PaymentIntent\nfrom kittycad.types import Response\n\n\ndef example_create_payment_intent_for_user():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[PaymentIntent, Error]\n    ] = create_payment_intent_for_user.sync(\n        client=client,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: PaymentIntent = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.payments.create_payment_intent_for_user.html"}}, {"op": "add", "path": "/paths/~1file~1surface-area/post/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.file import create_file_surface_area\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, FileSurfaceArea\nfrom kittycad.models.file_import_format import FileImportFormat\nfrom kittycad.types import Response\n\n\ndef example_create_file_surface_area():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[FileSurfaceArea, Error]\n    ] = create_file_surface_area.sync(\n        client=client,\n        src_format=FileImportFormat.DAE,\n        body=bytes(\"some bytes\", \"utf-8\"),\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: FileSurfaceArea = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.file.create_file_surface_area.html"}}, {"op": "add", "path": "/paths/~1unit~1conversion~1power~1{input_unit}~1{output_unit}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.unit import get_power_unit_conversion\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import Error, UnitPowerConversion\nfrom kittycad.models.unit_power import UnitPower\nfrom kittycad.types import Response\n\n\ndef example_get_power_unit_conversion():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[UnitPowerConversion, Error]\n    ] = get_power_unit_conversion.sync(\n        client=client,\n        input_unit=UnitPower.BTU_PER_MINUTE,\n        output_unit=UnitPower.BTU_PER_MINUTE,\n        value=3.14,\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: UnitPowerConversion = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.unit.get_power_unit_conversion.html"}}, {"op": "add", "path": "/paths/~1async~1operations~1{id}/get/x-python", "value": {"example": "from typing import Any, List, Optional, Union\n\nfrom kittycad.api.api_calls import get_async_operation\nfrom kittycad.client import ClientFromEnv\nfrom kittycad.models import (\n    Error,\n    FileCenterOfMass,\n    FileConversion,\n    FileDensity,\n    FileMass,\n    FileSurfaceArea,\n    FileVolume,\n)\nfrom kittycad.types import Response\n\n\ndef example_get_async_operation():\n    # Create our client.\n    client = ClientFromEnv()\n\n    result: Optional[\n        Union[\n            FileConversion,\n            FileCenterOfMass,\n            FileMass,\n            FileVolume,\n            FileDensity,\n            FileSurfaceArea,\n            Error,\n        ]\n    ] = get_async_operation.sync(\n        client=client,\n        id=\"<string>\",\n    )\n\n    if isinstance(result, Error) or result == None:\n        print(result)\n        raise Exception(\"Error in response\")\n\n    body: Union[\n        FileConversion,\n        FileCenterOfMass,\n        FileMass,\n        FileVolume,\n        FileDensity,\n        FileSurfaceArea,\n    ] = result\n    print(body)\n", "libDocsLink": "https://python.api.docs.kittycad.io/_autosummary/kittycad.api.api_calls.get_async_operation.html"}}, {"op": "add", "path": "/components/schemas/ApiCallQueryGroupBy/type", "value": "string"}, {"op": "add", "path": "/components/schemas/ApiCallQueryGroupBy/enum", "value": ["email", "method", "endpoint", "user_id", "origin", "ip_address"]}, {"op": "add", "path": "/components/schemas/UnitTorque/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitTorque/enum", "value": ["newton_metres", "pound_foot"]}, {"op": "add", "path": "/components/schemas/AiPluginAuthType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/AiPluginAuthType/enum", "value": ["none", "user_http", "service_http", "oauth"]}, {"op": "add", "path": "/components/schemas/UnitEnergy/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitEnergy/enum", "value": ["btu", "electronvolts", "joules", "kilocalories", "kilowatt_hours", "watt_hours"]}, {"op": "add", "path": "/components/schemas/UnitMass/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitMass/enum", "value": ["carats", "grains", "grams", "kilograms", "long_tons", "metric_tons", "micrograms", "milligrams", "ounces", "pennyweights", "pounds", "short_tons", "stones", "troy_ounces", "troy_pounds"]}, {"op": "add", "path": "/components/schemas/AccountProvider/type", "value": "string"}, {"op": "add", "path": "/components/schemas/AccountProvider/enum", "value": ["google", "github"]}, {"op": "add", "path": "/components/schemas/Method/type", "value": "string"}, {"op": "add", "path": "/components/schemas/Method/enum", "value": ["OPTIONS", "GET", "POST", "PUT", "DELETE", "HEAD", "TRACE", "CONNECT", "PATCH", "EXTENSION"]}, {"op": "add", "path": "/components/schemas/CreatedAtSortMode/type", "value": "string"}, {"op": "add", "path": "/components/schemas/CreatedAtSortMode/enum", "value": ["created-at-ascending", "created-at-descending"]}, {"op": "add", "path": "/components/schemas/CameraDragInteractionType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/CameraDragInteractionType/enum", "value": ["pan", "rotate", "zoom"]}, {"op": "add", "path": "/components/schemas/UnitTemperature/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitTemperature/enum", "value": ["celsius", "fahrenheit", "kelvin", "rankine"]}, {"op": "add", "path": "/components/schemas/UnitPressure/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitPressure/enum", "value": ["atmospheres", "bars", "hectopascals", "kilopascals", "millibars", "pascals", "psi"]}, {"op": "add", "path": "/components/schemas/InvoiceStatus/type", "value": "string"}, {"op": "add", "path": "/components/schemas/InvoiceStatus/enum", "value": ["deleted", "draft", "open", "paid", "uncollectible", "void"]}, {"op": "add", "path": "/components/schemas/OAuth2GrantType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/OAuth2GrantType/enum", "value": ["urn:ietf:params:oauth:grant-type:device_code"]}, {"op": "add", "path": "/components/schemas/ApiCallStatus/type", "value": "string"}, {"op": "add", "path": "/components/schemas/ApiCallStatus/enum", "value": ["Queued", "Uploaded", "In Progress", "Completed", "Failed"]}, {"op": "add", "path": "/components/schemas/FileImportFormat/type", "value": "string"}, {"op": "add", "path": "/components/schemas/FileImportFormat/enum", "value": ["dae", "dxf", "fbx", "obj_zip", "obj", "ply", "step", "stl"]}, {"op": "add", "path": "/components/schemas/PhysicsConstantName/type", "value": "string"}, {"op": "add", "path": "/components/schemas/PhysicsConstantName/enum", "value": ["pi", "c", "speed_of_light", "G", "newtonian_gravitation", "h", "planck_const", "mu_0", "vacuum_permeability", "E_0", "vacuum_permitivity", "Z_0", "vacuum_impedance", "k_e", "coulomb_const", "e", "elementary_charge", "m_e", "electron_mass", "m_p", "proton_mass", "mu_B", "bohr_magneton", "NA", "avogadro_num", "R", "molar_gas_const", "K_B", "boltzmann_const", "F", "faraday_const", "sigma", "stefan_boltzmann_const"]}, {"op": "add", "path": "/components/schemas/Environment/type", "value": "string"}, {"op": "add", "path": "/components/schemas/Environment/enum", "value": ["DEVELOPMENT", "PREVIEW", "PRODUCTION"]}, {"op": "add", "path": "/components/schemas/Currency/type", "value": "string"}, {"op": "add", "path": "/components/schemas/Currency/enum", "value": ["aed", "afn", "all", "amd", "ang", "aoa", "ars", "aud", "awg", "azn", "bam", "bbd", "bdt", "bgn", "bif", "bmd", "bnd", "bob", "brl", "bsd", "bwp", "bzd", "cad", "cdf", "chf", "clp", "cny", "cop", "crc", "cve", "czk", "djf", "dkk", "dop", "dzd", "eek", "egp", "etb", "eur", "fjd", "fkp", "gbp", "gel", "gip", "gmd", "gnf", "gtq", "gyd", "hkd", "hnl", "hrk", "htg", "huf", "idr", "ils", "inr", "isk", "jmd", "jpy", "kes", "kgs", "khr", "kmf", "krw", "kyd", "kzt", "lak", "lbp", "lkr", "lrd", "lsl", "ltl", "lvl", "mad", "mdl", "mga", "mkd", "mnt", "mop", "mro", "mur", "mvr", "mwk", "mxn", "myr", "mzn", "nad", "ngn", "nio", "nok", "npr", "nzd", "pab", "pen", "pgk", "php", "pkr", "pln", "pyg", "qar", "ron", "rsd", "rub", "rwf", "sar", "sbd", "scr", "sek", "sgd", "shp", "sll", "sos", "srd", "std", "svc", "szl", "thb", "tjs", "top", "try", "ttd", "twd", "tzs", "uah", "ugx", "usd", "uyu", "uzs", "vef", "vnd", "vuv", "wst", "xaf", "xcd", "xof", "xpf", "yer", "zar", "zmw"]}, {"op": "add", "path": "/components/schemas/AiPluginApiType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/AiPluginApiType/enum", "value": ["openapi"]}, {"op": "add", "path": "/components/schemas/UnitAngle/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitAngle/enum", "value": ["degrees", "radians"]}, {"op": "add", "path": "/components/schemas/AiPluginHttpAuthType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/AiPluginHttpAuthType/enum", "value": ["basic", "bearer"]}, {"op": "add", "path": "/components/schemas/UnitFrequency/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitFrequency/enum", "value": ["gigahertz", "hertz", "kilohertz", "megahertz", "microhertz", "millihertz", "nanohertz", "terahertz"]}, {"op": "add", "path": "/components/schemas/UnitArea/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitArea/enum", "value": ["acres", "hectares", "square_centimetres", "square_decimetres", "square_feet", "square_hectometres", "square_inches", "square_kilometres", "square_metres", "square_micrometres", "square_miles", "square_millimetres", "square_nanometres", "square_yards"]}, {"op": "add", "path": "/components/schemas/CodeLanguage/type", "value": "string"}, {"op": "add", "path": "/components/schemas/CodeLanguage/enum", "value": ["go", "python", "node"]}, {"op": "add", "path": "/components/schemas/FileExportFormat/type", "value": "string"}, {"op": "add", "path": "/components/schemas/FileExportFormat/enum", "value": ["dae", "dxf", "fbx", "fbxb", "obj", "ply", "step", "stl"]}, {"op": "add", "path": "/components/schemas/PaymentMethodType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/PaymentMethodType/enum", "value": ["card"]}, {"op": "add", "path": "/components/schemas/UnitVolume/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitVolume/enum", "value": ["cubic_centimetres", "cubic_feet", "cubic_inches", "cubic_metres", "cubic_yards", "cups", "drams", "drops", "fluid_ounces", "fluid_ounces_uk", "gallons", "gallons_uk", "litres", "millilitres", "pints", "pints_uk", "quarts", "tablespoons", "teaspoons"]}, {"op": "add", "path": "/components/schemas/UnitForce/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitForce/enum", "value": ["dynes", "kiloponds", "micronewtons", "millinewtons", "newtons", "poundals", "pounds"]}, {"op": "add", "path": "/components/schemas/CountryCode/type", "value": "string"}, {"op": "add", "path": "/components/schemas/CountryCode/enum", "value}, {"op": "add", "path": "/components/schemas/AsyncApiCallType/type", "value": "string"}, {"op": "add", "path": "/components/schemas/AsyncApiCallType/enum", "value": ["FileConversion", "FileVolume", "FileCenterOfMass", "FileMass", "FileDensity", "FileSurfaceArea"]}, {"op": "add", "path": "/components/schemas/UnitPower/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitPower/enum", "value": ["btu_per_minute", "horsepower", "kilowatts", "metric_horsepower", "microwatts", "milliwatts", "watts"]}, {"op": "add", "path": "/components/schemas/UnitLength/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitLength/enum", "value": ["centimetres", "decimetres", "feet", "furlongs", "hectometres", "inches", "kilometres", "metres", "micrometres", "miles", "millimetres", "nanometres", "yards"]}, {"op": "add", "path": "/components/schemas/UnitCurrent/type", "value": "string"}, {"op": "add", "path": "/components/schemas/UnitCurrent/enum", "value": ["amperes", "microamperes", "milliamperes", "nanoamperes"]}, {"op": "add", "path": "/info/x-python", "value": {"client": "# Create a client with your token.\nfrom kittycad import Client\n\nclient = Client(token=\"$TOKEN\")\n\n# - OR -\n\n# Create a new client with your token parsed from the environment variable:\n#   `KITTYCAD_API_TOKEN`.\nfrom kittycad import ClientFromEnv\n\nclient = ClientFromEnv()\n\n# NOTE: The python library additionally implements asyncio, however all the code samples we\n# show below use the sync functions for ease of use and understanding.\n# Check out the library docs at:\n# https://python.api.docs.kittycad.io/_autosummary/kittycad.api.html#module-kittycad.api\n# for more details.", "install": "pip install kittycad"}}]